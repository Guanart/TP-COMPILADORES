package com.grupo2.tpteo1grupo2;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.*;
import java.io.*;
import java.nio.file.*;
import com.grupo2.tpteo1grupo2.clases.*;
import com.grupo2.tpteo1grupo2.Utils;
import com.grupo2.tpteo1grupo2.TablaSimbolos;


parser code
{:
    public String getReglas(){return action_obj.getReglas();}

    public void syntax_error(Symbol s) {
        //System.out.println("Error en la linea " + (s.right+1) + " columna " + (s.left+1) + ". "
        //    + s + " no reconocido, VALOR: " + s.value );
        throw new SintaxException("Error de sintaxis");
    }
:}

action code
{:
    public String reglas;
    private final Utils utils = new Utils();
    private TablaSimbolos tablaSimbolos = new TablaSimbolos();

    public String getReglas() {
        return reglas;
    }

    public ArrayList<NodoSentencia> listaSentencias = new ArrayList<NodoSentencia>();

    public void verificarID(String nombre) {
       if (!tablaSimbolos.contieneIdentificador(nombre)) {
           throw new InvalidIDException("La variable '" + nombre + "' no fue declarada");
       }
    }

    public NodoComparacion obtenerNodoComparacion(String c, NodoExpresion expr1, NodoExpresion expr2) {
        switch (c) {
           case "<":
               return new NodoMenor(expr1, expr2);
           case ">":
               return new NodoMayor(expr1, expr2);
           case "=":
               return new NodoIgual(expr1, expr2);
           case "<=":
               return new NodoMenorIgual(expr1, expr2);
           case ">=":
               return new NodoMayorIgual(expr1, expr2);
        }
        return null;
    }

    public NodoExpresionBooleana obtenerNodoExpresionBooleana(String con, NodoComparacion comp1, NodoComparacion comp2) {
        switch (con) {
           case "&&":
               return new NodoAnd(comp1, comp2);
           case "||":
               return new NodoOr(comp1, comp2);
        }
        return null;
    }

    public String operadorOplist;

    public NodoExpresionBinaria operacionOplist(NodoExpresion izquierda, NodoExpresion derecha) {
        if (operadorOplist.equals("+")) {
            return new NodoSuma(izquierda, derecha);
        } else {
            return new NodoMultiplicacion(izquierda, derecha);
        }
    }

    public ArrayList<NodoDeclaracion> listaDeclaraciones = new ArrayList<NodoDeclaracion>();
    public ArrayList<NodoIdentificador> listaIdDeclareSec = new ArrayList<NodoIdentificador>();
    public ArrayList<NodoTipo> listaTipoDeclareSec = new ArrayList<NodoTipo>();

    public ArrayList<NodoDeclaracion> combinarIdTipo() {
        ArrayList<NodoDeclaracion> output = new ArrayList<NodoDeclaracion>();
        for (int i = 0; i < listaIdDeclareSec.size(); i++) {
            NodoIdentificador idNode = listaIdDeclareSec.get(i);
            NodoTipo idType = listaTipoDeclareSec.get(listaIdDeclareSec.size()-1-i);
            idNode.setTipo(idType.getType());
            NodoDeclaracion nodo = new NodoDeclaracion(
                            idNode,
                            idType);
            listaDeclaraciones.add(nodo);
            tablaSimbolos.agregarIdentificador(nodo.getIdentificador(), nodo.getTipo());
        }
        listaIdDeclareSec.clear();
        listaTipoDeclareSec.clear();
        return listaDeclaraciones;
    }
:}

/*Declaracion de Terminales */
terminal IF, THEN, ELSE, ENDIF, WHILE, ENDWHILE, WRITE, FLOAT, INTEGER, STRING, OPLIST, ID, CONST_INT, CONST_REAL, CON_OR, CON_AND,
CONST_STRING, CONST_B, OP_MENOR, OP_MAYOR, OP_IGUAL, OP_MENOR_IGUAL, OP_MAYOR_IGUAL, OP_SUMA, OP_RESTA, OP_MULT, OP_DIV, ASIGN, DECLARACION, DECLARE_SECTION,
ENDDECLARE_SECTION, PROGRAM_SECTION, ENDPROGRAM_SECTION, ABRIR_PARENTESIS, CERRAR_PARENTESIS, ABRIR_CORCHETE, CERRAR_CORCHETE, PUNTO_Y_COMA, COMA;

/*Declaracion de No Terminales*/
non terminal NodoPrograma pgm;
non terminal NodoSentencia sentencia;
non terminal NodoExpresion expresion, termino, factor;
non terminal NodoAsignacion asignacion;
non terminal NodoExpresionBooleana condicion;
non terminal NodoIf decision;
non terminal NodoCiclo iteracion;
non terminal ArrayList<NodoDeclaracion> declare_sec, declaracion;
non terminal ArrayList<NodoSentencia> program_sec, sentencia_write, program_write, sentencia_n;
non terminal NodoEscritura write_constante, escritura;
non terminal NodoExpresion parametro_escritura, oplist_const, const_numerica;
non terminal NodoOplist oplist;
non terminal NodoComparacion comparacion;
non terminal declaracion_n, declaracion_aux, type, conector, oplist_operacion, comparador;

start with pgm;

pgm::= declare_sec:ds program_sec:ps {:
                                        NodoPrograma root = new NodoPrograma(null, ps);
                                        RESULT = root;
                                        reglas += "Regla 00: pgm ; Compilación completa\n";
                                        tablaSimbolos.guardarComoCSV("tabla_de_simbolos.csv");
                                        root.generarAssembler(tablaSimbolos);
                                        :}

    |  program_write:pw {:  RESULT = new NodoPrograma(null, pw); reglas += "Regla 01: pgm --> PROGRAM WRITE; Compilación completa\n";
                            tablaSimbolos.guardarComoCSV("tabla_de_simbolos.csv");:};

declare_sec::= DECLARE_SECTION:ds declaracion_n ENDDECLARE_SECTION:es {:reglas += "Regla 02: DECLARE_SEC --> " + ds + " DECLARACIONES " + es + "\n";:};

declaracion_n::= declaracion_n declaracion {:reglas += "Regla 03: DECLARACIONES --> DECLARACIONES DECLARACION\n";:}
    | declaracion {:reglas += "Regla 04: DECLARACIONES --> DECLARACION\n";:};

program_sec::= PROGRAM_SECTION:ps sentencia_n:sn ENDPROGRAM_SECTION:es {:RESULT = sn; reglas += "Regla 05: PROGRAM_SEC --> " + ps + " SENTENCIAS " + es + "\n";:};

sentencia_n::= sentencia_n:ss sentencia:s {:ss.add(s);
                                            RESULT = ss;
                                            reglas += "Regla 06: SENTENCIAS --> SENTENCIAS SENTENCIA\n";:}
    | sentencia:s {:listaSentencias = new ArrayList<NodoSentencia>();
                    listaSentencias.add(s);
                    RESULT = listaSentencias;
                    reglas += "Regla 07: SENTENCIAS --> SENTENCIA\n";:};

program_write::= PROGRAM_SECTION sentencia_write:sws ENDPROGRAM_SECTION {:  RESULT = sws;
                                                                            reglas += "Regla 08: PROGRAM WRITE --> PROGRAM_SECTION SENTENCIA_WRITE ENDPROGRAM_SECTION\n";:};

sentencia_write::= sentencia_write:sws write_constante:sw {:sws.add(sw);
                                                            RESULT = sws;
                                                            reglas += "Regla 09: SENTENCIA WRITE --> SENTENCIA_WRITE WRITE_CONSTANTE\n";:}
    | write_constante:sw {: listaSentencias = new ArrayList<NodoSentencia>();
                            listaSentencias.add(sw);
                            RESULT = listaSentencias;
                            reglas += "Regla 10: SENTENCIA WRITE --> WRITE_CONSTANTE\n";:};

write_constante::= WRITE:w CONST_STRING:c {:tablaSimbolos.agregarConstanteString(c.toString());
                                            RESULT = new NodoEscritura(new NodoConstanteString(c.toString()));
                                            reglas += "Regla 11: WRITE CONSTANTE --> " + w + " " + c + "\n";:};



declaracion::= ABRIR_CORCHETE:ac ID:id declaracion_aux:da type:type CERRAR_CORCHETE:cc {:reglas += "Regla 12: DECLARACION --> " + ac.toString() + id.toString() + da.toString() + type.toString() + cc.toString() + "\n";
    listaIdDeclareSec.add(new NodoIdentificador(id.toString()));
    listaTipoDeclareSec.add(new NodoTipo(type.toString()));
    RESULT = combinarIdTipo();
    //parser.actualizarTipo(ac.toString() + id.toString() + da.toString() + type.toString() + cc.toString());
:};

declaracion_aux::= COMA:coma ID:id declaracion_aux:da type:type COMA {:
    listaIdDeclareSec.add(new NodoIdentificador(id.toString()));
    listaTipoDeclareSec.add(new NodoTipo(type.toString()));
    reglas += "Regla 13: DECLARACION_AUX --> " + coma + " " + id  + da + type + coma + " " + "\n";
    RESULT = coma.toString()+ " " +id.toString() + da.toString() + type.toString() + coma.toString() + " ";
    :}
    | CERRAR_CORCHETE:cc2 DECLARACION:d ABRIR_CORCHETE:aco {:
    reglas += "Regla 14: DECLARACION_AUX --> " + cc2 + d + aco + "\n";
    RESULT = cc2.toString() + d.toString() + aco.toString();:};

type::= FLOAT:f {: RESULT=f;  reglas += "Regla 15: TYPE --> " + f + "\n";:}
    | INTEGER:i {: RESULT=i; reglas += "Regla 16: TYPE --> " + i + "\n";:}
    | STRING:s {: RESULT=s; reglas += "Regla 17: TYPE --> " + s + "\n";:};

/* [a,b,c] := [string,float,int] */


sentencia::= asignacion:asig {: RESULT = asig;
                                reglas += "Regla 18: SENTENCIA --> ASIGNACION\n";:}
    | iteracion:iter {: RESULT = iter;
                        reglas += "Regla 19: SENTENCIA --> ITERACION\n";:}
    | decision:dec {:   RESULT = dec;
                        reglas += "Regla 20: SENTENCIA --> DECISION\n";:}
    | escritura:escr {: RESULT = escr;
                        reglas += "Regla 21: SENTENCIA --> ESCRITURA\n";:}
    | oplist:opl {: RESULT = opl;
                    reglas += "Regla 22: SENTENCIA --> OPLIST\n";:};

asignacion::= ID:id ASIGN:a expresion:expr {:   verificarID(id.toString());
                                                String tipo = tablaSimbolos.obtenerTipo(id.toString());
                                                RESULT = new NodoAsignacion(new NodoIdentificador(id.toString(), tipo), expr);
                                                reglas += "Regla 23: ASIGNACION --> " + id + " " + a + " EXPRESION \n";:}
    | ID:id ASIGN:a CONST_STRING:cs {:  verificarID(id.toString());
                                        tablaSimbolos.agregarConstanteString(cs.toString());
                                        String tipo = tablaSimbolos.obtenerTipo(id.toString());
                                        RESULT = new NodoAsignacion(new NodoIdentificador(id.toString(), tipo), new NodoConstanteString(cs.toString()));
                                        reglas += "Regla 24: ASIGNACION --> " + id + " " + a + " " + cs + "\n";:};

/* ss: sentencias , s: sentencia */

decision::= IF:i ABRIR_PARENTESIS:ap condicion:cond CERRAR_PARENTESIS:cp THEN:t sentencia_n:ss ELSE:el sentencia_n:sselse ENDIF:endif {:
        RESULT = new NodoIf(cond, ss, sselse);
        reglas += "Regla 25: DECISION --> " + i + " " + ap + " CONDICION " + cp + " " + t + " SENTENCIAS " + el + " SENTENCIAS " + endif + "\n";:}
    | IF:i1 ABRIR_PARENTESIS:ap1 condicion:cond1 CERRAR_PARENTESIS:cp1 THEN:t1 sentencia_n:ss1 ENDIF:endif1 {:
        RESULT = new NodoIf(cond1, ss1, null);
        reglas += "Regla 26: DECISION --> " + i1 + " " + ap1 + " CONDICION " + cp1 + " " + t1 + " SENTENCIAS " + endif1 + "\n";:};

iteracion::= WHILE:w ABRIR_PARENTESIS:ap condicion:cond CERRAR_PARENTESIS:cp THEN:t sentencia_n:ss ENDWHILE:ew {:
        RESULT = new NodoCiclo(cond, ss);
        reglas += "Regla 27: ITERACION --> " + w + " " + ap + " CONDICION " + cp + " " + t + " SENTENCIAS " + ew + "\n";:};

condicion::= comparacion:comp {:    RESULT = comp;
                                    reglas += "Regla 28: CONDICION --> COMPARACION\n";:}
    | comparacion:comp1 conector:con comparacion:comp2 {:   RESULT = obtenerNodoExpresionBooleana(con.toString(), comp1, comp2);
                                                            reglas += "Regla 29: CONDICION --> COMPARACION CONECTOR COMPARACION\n";:};

conector::= CON_AND:and {:  RESULT = and;
                            reglas += "Regla 30: CONECTOR --> CON_AND\n";:}
    | CON_OR:or {:  RESULT = or;
                    reglas += "Regla 31: CONECTOR --> CON_OR\n";:};

comparacion::= expresion:expr1 comparador:c expresion:expr2 {:  RESULT = obtenerNodoComparacion(c.toString(), expr1, expr2);
                                                                reglas += "Regla 32: COMPARACION --> EXPRESION " + c + " EXPRESION\n";:}
    | ABRIR_PARENTESIS:ap comparacion:comp CERRAR_PARENTESIS:cp {:  RESULT = comp;
                                                                    reglas += "Regla 33: COMPARACION --> " + ap + " COMPARACION " + cp + "\n";:};

comparador::= OP_MAYOR:ma {:RESULT = ma;
                            reglas += "Regla 34: COMPARADOR --> " + ma + "\n";:}
    | OP_MENOR:me {:RESULT = me;
                    reglas += "Regla 35: COMPARADOR --> " + me + "\n";:}
    | OP_IGUAL:i {: RESULT = i;
                    reglas += "Regla 36: COMPARADOR --> " + i + "\n";:}
    | OP_MENOR_IGUAL:mei {: RESULT = mei;
                            reglas += "Regla 37: COMPARADOR --> " + mei + "\n";:}
    | OP_MAYOR_IGUAL:mai {: RESULT = mai;
                            reglas += "Regla 38: COMPARADOR --> " + mai + "\n";:};

expresion::= expresion:expr OP_SUMA:os termino:term {:  RESULT = new NodoSuma(expr, term);
                                                        reglas += "Regla 39: EXPRESION --> EXPRESION " + os + " TERMINO\n"; :}
    | expresion:expr OP_RESTA:or termino:term {:RESULT = new NodoResta(expr, term);
                                                reglas += "Regla 40: EXPRESION --> EXPRESION " + or + " TERMINO\n";:}
    | termino:term {:   RESULT = term;
                        reglas += "Regla 41: EXPRESION --> TERMINO\n";:};

termino::= termino:term OP_MULT:om factor:fact {:   RESULT = new NodoMultiplicacion(term, fact);
                                                    reglas += "Regla 42: TERMINO --> TERMINO " + om + " FACTOR\n";:}
    | termino:term OP_DIV:od factor:fact {: RESULT = new NodoDivision(term, fact);
                                            reglas += "Regla 43: TERMINO --> TERMINO " + od + " FACTOR\n";:}
    | factor:fact {:RESULT = fact;
                    reglas += "Regla 44: TERMINO --> FACTOR\n"; :};

factor::= ABRIR_PARENTESIS:a expresion:expr CERRAR_PARENTESIS:c {: RESULT = expr;
                                                                reglas += "Regla 44: FACTOR --> " + a + " EXPRESION " + c + "\n";:}
    | ID:id {:  verificarID(id.toString());
                String tipo = tablaSimbolos.obtenerTipo(id.toString());
                RESULT = new NodoIdentificador(id.toString(), tipo);
                reglas += "Regla 45: FACTOR --> " + id + "\n";:}
    | const_numerica:cn {:  RESULT = cn;
                            reglas += "Regla 46: FACTOR --> " + cn + "\n";:};

escritura::= WRITE:w parametro_escritura:param {:   RESULT = new NodoEscritura(param);
                                                    reglas += "Regla 47: ESCRITURA --> " + w + " " + param + "\n";:};

parametro_escritura::= ID:id {: verificarID(id.toString());
                                String tipo = tablaSimbolos.obtenerTipo(id.toString());
                                RESULT = new NodoIdentificador(id.toString(), tipo);
                                reglas += "Regla 48: VARIABLE --> " + id + "\n";:}
    | const_numerica:const_numerica {:  RESULT = const_numerica;
                                        reglas += "Regla 49: CONSTANTE NUMÉRICA --> " + const_numerica + "\n";:}
    | CONST_STRING:const_string {:  tablaSimbolos.agregarConstanteString(const_string.toString());
                                    RESULT = new NodoConstanteString(const_string.toString());
                                    reglas += "Regla 50: CONSTANTE STRING --> " + const_string + "\n";:};

oplist::= OPLIST:opl ABRIR_CORCHETE:ac oplist_operacion:oo ABRIR_CORCHETE ID:id PUNTO_Y_COMA:pyc ID:id2 CERRAR_CORCHETE:cc ABRIR_CORCHETE oplist_const:oc CERRAR_CORCHETE CERRAR_CORCHETE {:
    verificarID(id.toString());
    verificarID(id2.toString());
    String tipo = tablaSimbolos.obtenerTipo(id.toString());
    String tipo2 = tablaSimbolos.obtenerTipo(id2.toString());
    RESULT = new NodoOplist( new NodoAsignacion(new NodoIdentificador(id2.toString(), tipo2), operacionOplist(new NodoIdentificador(id.toString(), tipo), oc)) );
    reglas += "Regla 51: OPLIST --> " + opl + " " + ac + oo + " " + ac + id + pyc + id2 + cc + " " + ac + oc + cc + cc + "\n";:};

oplist_operacion::= OP_SUMA:suma {:   RESULT = suma;
                                    operadorOplist = suma.toString();
                                    reglas += "Regla 52: OPLIST_OPERACION --> " + suma + "\n";:}
    | OP_MULT:mult {: RESULT = mult;
                    operadorOplist = mult.toString();
                    reglas += "Regla 53: OPLIST_OPERACION --> " + mult + "\n"; :};

oplist_const::= oplist_const:opl_const PUNTO_Y_COMA:pyc const_numerica:const_num {:
    RESULT = operacionOplist(opl_const, const_num);
    reglas += "Regla 54: OPLIST_CONST --> " + opl_const + pyc + const_num + "\n";:}
    | const_numerica:const_num {:  RESULT = const_num;
                            reglas += "Regla 55: OPLIST_CONST --> " + const_num + "\n";:};

const_numerica::= CONST_B:const_b {:tablaSimbolos.agregarConstanteBinaria(const_b.toString());
                                    RESULT = new NodoConstanteBinaria(Integer.parseInt(const_b.toString().substring(2), 2), const_b.toString());
                                    reglas += "Regla 56: CONSTANTE BINARIA --> " + const_b + "\n";:}
    | CONST_REAL:const_real {:  tablaSimbolos.agregarConstanteReal(Double.parseDouble(const_real.toString()));
                                RESULT = new NodoConstanteReal(Double.parseDouble(const_real.toString()));
                                reglas += "Regla 57: CONSTANTE REAL --> " + const_real + "\n";:}
    | CONST_INT:const_int {:tablaSimbolos.agregarConstanteEntera(Integer.parseInt(const_int.toString()));
                            RESULT = new NodoConstanteEntera(Integer.parseInt(const_int.toString()));
                            reglas += "Regla 58: CONSTANTE ENTERA --> " + const_int + "\n";:};