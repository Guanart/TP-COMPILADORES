
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 26 12:44:22 ART 2024
//----------------------------------------------------

package com.grupo2.tpteo1grupo2;

import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.io.*;
import java.nio.file.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 26 12:44:22 ART 2024
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\005\000\002\004\004\000\002\004\003" +
    "\000\002\005\005\000\002\006\004\000\002\006\003\000" +
    "\002\007\005\000\002\010\004\000\002\010\003\000\002" +
    "\011\004\000\002\012\007\000\002\013\007\000\002\013" +
    "\005\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\016\005\000\002" +
    "\016\005\000\002\017\013\000\002\017\011\000\002\020" +
    "\011\000\002\021\003\000\002\021\005\000\002\024\003" +
    "\000\002\024\003\000\002\022\005\000\002\022\005\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\025\005\000\002\025" +
    "\005\000\002\025\003\000\002\026\005\000\002\026\005" +
    "\000\002\026\003\000\002\027\005\000\002\027\003\000" +
    "\002\027\003\000\002\030\004\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\032\016\000\002\033" +
    "\003\000\002\033\003\000\002\034\005\000\002\034\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\006\041\010\043\006\001\002\000\004\002" +
    "\174\001\002\000\004\002\uffff\001\002\000\004\012\167" +
    "\001\002\000\004\043\035\001\002\000\004\047\011\001" +
    "\002\000\004\017\016\001\002\000\006\042\014\047\011" +
    "\001\002\000\006\042\ufffc\047\ufffc\001\002\000\004\043" +
    "\ufffe\001\002\000\006\042\ufffd\047\ufffd\001\002\000\006" +
    "\050\020\052\017\001\002\000\004\017\031\001\002\000" +
    "\004\040\027\001\002\000\010\013\025\014\022\015\023" +
    "\001\002\000\006\050\ufff0\052\ufff0\001\002\000\006\050" +
    "\uffef\052\uffef\001\002\000\004\050\026\001\002\000\006" +
    "\050\ufff1\052\ufff1\001\002\000\006\042\ufff4\047\ufff4\001" +
    "\002\000\004\047\030\001\002\000\010\013\ufff2\014\ufff2" +
    "\015\ufff2\001\002\000\006\050\020\052\017\001\002\000" +
    "\010\013\025\014\022\015\023\001\002\000\004\052\034" +
    "\001\002\000\010\013\ufff3\014\ufff3\015\ufff3\001\002\000" +
    "\014\004\043\010\037\012\046\016\050\017\045\001\002" +
    "\000\004\002\000\001\002\000\004\045\160\001\002\000" +
    "\024\004\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9" +
    "\016\ufff9\017\ufff9\044\ufff9\001\002\000\024\004\uffee\006" +
    "\uffee\007\uffee\010\uffee\011\uffee\012\uffee\016\uffee\017\uffee" +
    "\044\uffee\001\002\000\024\004\uffec\006\uffec\007\uffec\010" +
    "\uffec\011\uffec\012\uffec\016\uffec\017\uffec\044\uffec\001\002" +
    "\000\004\045\126\001\002\000\024\004\uffed\006\uffed\007" +
    "\uffed\010\uffed\011\uffed\012\uffed\016\uffed\017\uffed\044\uffed" +
    "\001\002\000\004\037\104\001\002\000\014\017\100\020" +
    "\072\021\070\024\101\025\071\001\002\000\024\004\uffeb" +
    "\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\016\uffeb\017" +
    "\uffeb\044\uffeb\001\002\000\004\047\055\001\002\000\024" +
    "\004\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\016" +
    "\uffea\017\uffea\044\uffea\001\002\000\016\004\043\010\037" +
    "\012\046\016\050\017\045\044\053\001\002\000\004\002" +
    "\ufffb\001\002\000\024\004\ufffa\006\ufffa\007\ufffa\010\ufffa" +
    "\011\ufffa\012\ufffa\016\ufffa\017\ufffa\044\ufffa\001\002\000" +
    "\006\033\057\035\056\001\002\000\004\047\uffca\001\002" +
    "\000\004\047\uffcb\001\002\000\004\047\061\001\002\000" +
    "\004\017\062\001\002\000\004\051\063\001\002\000\004" +
    "\017\064\001\002\000\004\050\065\001\002\000\004\047" +
    "\066\001\002\000\010\020\072\021\070\025\071\001\002" +
    "\000\006\050\074\051\075\001\002\000\060\004\uffc6\006" +
    "\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\016\uffc6\017\uffc6" +
    "\022\uffc6\023\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032" +
    "\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\044\uffc6\046\uffc6" +
    "\050\uffc6\051\uffc6\001\002\000\060\004\uffc7\006\uffc7\007" +
    "\uffc7\010\uffc7\011\uffc7\012\uffc7\016\uffc7\017\uffc7\022\uffc7" +
    "\023\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033" +
    "\uffc7\034\uffc7\035\uffc7\036\uffc7\044\uffc7\046\uffc7\050\uffc7" +
    "\051\uffc7\001\002\000\060\004\uffc5\006\uffc5\007\uffc5\010" +
    "\uffc5\011\uffc5\012\uffc5\016\uffc5\017\uffc5\022\uffc5\023\uffc5" +
    "\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034" +
    "\uffc5\035\uffc5\036\uffc5\044\uffc5\046\uffc5\050\uffc5\051\uffc5" +
    "\001\002\000\006\050\uffc8\051\uffc8\001\002\000\004\050" +
    "\077\001\002\000\010\020\072\021\070\025\071\001\002" +
    "\000\006\050\uffc9\051\uffc9\001\002\000\024\004\uffcc\006" +
    "\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\016\uffcc\017\uffcc" +
    "\044\uffcc\001\002\000\024\004\uffcf\006\uffcf\007\uffcf\010" +
    "\uffcf\011\uffcf\012\uffcf\016\uffcf\017\uffcf\044\uffcf\001\002" +
    "\000\024\004\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012" +
    "\uffcd\016\uffcd\017\uffcd\044\uffcd\001\002\000\024\004\uffce" +
    "\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce\016\uffce\017" +
    "\uffce\044\uffce\001\002\000\024\004\uffd0\006\uffd0\007\uffd0" +
    "\010\uffd0\011\uffd0\012\uffd0\016\uffd0\017\uffd0\044\uffd0\001" +
    "\002\000\016\017\112\020\072\021\070\024\107\025\071" +
    "\045\110\001\002\000\054\004\uffd7\006\uffd7\007\uffd7\010" +
    "\uffd7\011\uffd7\012\uffd7\016\uffd7\017\uffd7\022\uffd7\023\uffd7" +
    "\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034" +
    "\uffd7\035\117\036\120\044\uffd7\046\uffd7\001\002\000\054" +
    "\004\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\016" +
    "\uffd1\017\uffd1\022\uffd1\023\uffd1\026\uffd1\027\uffd1\030\uffd1" +
    "\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\044" +
    "\uffd1\046\uffd1\001\002\000\024\004\uffe8\006\uffe8\007\uffe8" +
    "\010\uffe8\011\uffe8\012\uffe8\016\uffe8\017\uffe8\044\uffe8\001" +
    "\002\000\014\017\112\020\072\021\070\025\071\045\110" +
    "\001\002\000\030\004\uffe9\006\uffe9\007\uffe9\010\uffe9\011" +
    "\uffe9\012\uffe9\016\uffe9\017\uffe9\033\115\034\114\044\uffe9" +
    "\001\002\000\054\004\uffd2\006\uffd2\007\uffd2\010\uffd2\011" +
    "\uffd2\012\uffd2\016\uffd2\017\uffd2\022\uffd2\023\uffd2\026\uffd2" +
    "\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035" +
    "\uffd2\036\uffd2\044\uffd2\046\uffd2\001\002\000\054\004\uffd4" +
    "\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\016\uffd4\017" +
    "\uffd4\022\uffd4\023\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\044\uffd4\046" +
    "\uffd4\001\002\000\014\017\112\020\072\021\070\025\071" +
    "\045\110\001\002\000\014\017\112\020\072\021\070\025" +
    "\071\045\110\001\002\000\054\004\uffd9\006\uffd9\007\uffd9" +
    "\010\uffd9\011\uffd9\012\uffd9\016\uffd9\017\uffd9\022\uffd9\023" +
    "\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9" +
    "\034\uffd9\035\117\036\120\044\uffd9\046\uffd9\001\002\000" +
    "\014\017\112\020\072\021\070\025\071\045\110\001\002" +
    "\000\014\017\112\020\072\021\070\025\071\045\110\001" +
    "\002\000\054\004\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5" +
    "\012\uffd5\016\uffd5\017\uffd5\022\uffd5\023\uffd5\026\uffd5\027" +
    "\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5" +
    "\036\uffd5\044\uffd5\046\uffd5\001\002\000\054\004\uffd6\006" +
    "\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\016\uffd6\017\uffd6" +
    "\022\uffd6\023\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032" +
    "\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\044\uffd6\046\uffd6" +
    "\001\002\000\054\004\uffd8\006\uffd8\007\uffd8\010\uffd8\011" +
    "\uffd8\012\uffd8\016\uffd8\017\uffd8\022\uffd8\023\uffd8\026\uffd8" +
    "\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035" +
    "\117\036\120\044\uffd8\046\uffd8\001\002\000\010\033\115" +
    "\034\114\046\125\001\002\000\054\004\uffd3\006\uffd3\007" +
    "\uffd3\010\uffd3\011\uffd3\012\uffd3\016\uffd3\017\uffd3\022\uffd3" +
    "\023\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033" +
    "\uffd3\034\uffd3\035\uffd3\036\uffd3\044\uffd3\046\uffd3\001\002" +
    "\000\014\017\112\020\072\021\070\025\071\045\130\001" +
    "\002\000\010\022\155\023\154\046\uffe4\001\002\000\014" +
    "\017\112\020\072\021\070\025\071\045\130\001\002\000" +
    "\020\026\142\027\145\030\146\031\144\032\143\033\115" +
    "\034\114\001\002\000\004\046\133\001\002\000\004\005" +
    "\134\001\002\000\014\004\043\010\037\012\046\016\050" +
    "\017\045\001\002\000\020\004\043\006\136\007\137\010" +
    "\037\012\046\016\050\017\045\001\002\000\014\004\043" +
    "\010\037\012\046\016\050\017\045\001\002\000\024\004" +
    "\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\016\uffe6" +
    "\017\uffe6\044\uffe6\001\002\000\016\004\043\007\141\010" +
    "\037\012\046\016\050\017\045\001\002\000\024\004\uffe7" +
    "\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\016\uffe7\017" +
    "\uffe7\044\uffe7\001\002\000\014\017\uffdd\020\uffdd\021\uffdd" +
    "\025\uffdd\045\uffdd\001\002\000\014\017\uffda\020\uffda\021" +
    "\uffda\025\uffda\045\uffda\001\002\000\014\017\uffdb\020\uffdb" +
    "\021\uffdb\025\uffdb\045\uffdb\001\002\000\014\017\uffde\020" +
    "\uffde\021\uffde\025\uffde\045\uffde\001\002\000\014\017\uffdc" +
    "\020\uffdc\021\uffdc\025\uffdc\045\uffdc\001\002\000\014\017" +
    "\112\020\072\021\070\025\071\045\110\001\002\000\014" +
    "\022\uffe0\023\uffe0\033\115\034\114\046\uffe0\001\002\000" +
    "\004\046\153\001\002\000\022\026\142\027\145\030\146" +
    "\031\144\032\143\033\115\034\114\046\125\001\002\000" +
    "\010\022\uffdf\023\uffdf\046\uffdf\001\002\000\014\017\uffe2" +
    "\020\uffe2\021\uffe2\025\uffe2\045\uffe2\001\002\000\014\017" +
    "\uffe1\020\uffe1\021\uffe1\025\uffe1\045\uffe1\001\002\000\014" +
    "\017\112\020\072\021\070\025\071\045\130\001\002\000" +
    "\004\046\uffe3\001\002\000\014\017\112\020\072\021\070" +
    "\025\071\045\130\001\002\000\004\046\162\001\002\000" +
    "\004\005\163\001\002\000\014\004\043\010\037\012\046" +
    "\016\050\017\045\001\002\000\016\004\043\010\037\011" +
    "\165\012\046\016\050\017\045\001\002\000\024\004\uffe5" +
    "\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\016\uffe5\017" +
    "\uffe5\044\uffe5\001\002\000\006\012\ufff6\044\ufff6\001\002" +
    "\000\004\024\173\001\002\000\006\012\167\044\172\001" +
    "\002\000\006\012\ufff7\044\ufff7\001\002\000\004\002\ufff8" +
    "\001\002\000\006\012\ufff5\044\ufff5\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\010\002\003\003\006\007\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\167\011\165" +
    "\001\001\000\004\005\035\001\001\000\006\004\011\012" +
    "\012\001\001\000\002\001\001\000\004\012\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\031\001" +
    "\001\000\004\014\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\006\051\015\037\016\040\017\041\020" +
    "\043\030\046\032\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\102\035\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\015\053\016\040" +
    "\017\041\020\043\030\046\032\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\034\066\035\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\025\110\026\104\027\112\035\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\025\123\026\104\027\112\035\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\026" +
    "\122\027\112\035\105\001\001\000\010\026\115\027\112" +
    "\035\105\001\001\000\002\001\001\000\006\027\121\035" +
    "\105\001\001\000\006\027\120\035\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\021\131\022\126\025\130" +
    "\026\104\027\112\035\105\001\001\000\004\024\155\001" +
    "\001\000\014\022\150\025\151\026\104\027\112\035\105" +
    "\001\001\000\004\023\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\006\134\015\037\016\040\017\041" +
    "\020\043\030\046\032\050\001\001\000\016\015\053\016" +
    "\040\017\041\020\043\030\046\032\050\001\001\000\020" +
    "\006\137\015\037\016\040\017\041\020\043\030\046\032" +
    "\050\001\001\000\002\001\001\000\016\015\053\016\040" +
    "\017\041\020\043\030\046\032\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\025\147\026" +
    "\104\027\112\035\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\022\156\025\130" +
    "\026\104\027\112\035\105\001\001\000\002\001\001\000" +
    "\016\021\160\022\126\025\130\026\104\027\112\035\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\006" +
    "\163\015\037\016\040\017\041\020\043\030\046\032\050" +
    "\001\001\000\016\015\053\016\040\017\041\020\043\030" +
    "\046\032\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\170\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public String getReglas(){return action_obj.getReglas();}

    public void syntax_error(Symbol s) {
        System.out.println("Error en la linea " + (s.right+1) + " columna " + (s.left+1) + ". "
            + s + " no reconocido, VALOR: " + s.value );
    }

   public void actualizarTipo(String RESULT) {
       // Nombre del archivo común para todos los nombres-tipos
       String archivo = "nombres_tipos.csv";
       System.out.println("Procesando RESULT: " + RESULT);

       try {
           // Verificar si el archivo existe
           File file = new File(archivo);
           boolean archivoExiste = file.exists();

           // Abrir el archivo para escribir (con append)
           try (BufferedWriter writer = new BufferedWriter(new FileWriter(file, true))) {
               // Si el archivo no existía, escribir la cabecera
               if (!archivoExiste) {
                   writer.write("NOMBRE,TIPO\n");
               }

               // Parsear RESULT
               String[] partes = RESULT.split(":="); // Separar por `:=`
               if (partes.length != 2) {
                   System.err.println("Formato inválido en RESULT: " + RESULT);
                   return;
               }

               // Procesar la lista de variables y tipos
               String variablesStr = partes[0].trim(); // [var5, var6, var7, var8, var9]
               String tiposStr = partes[1].trim(); // [STRING, FLOAT, INTEGER, FLOAT, STRING]

               // Remover corchetes y dividir por comas
               String[] variables = variablesStr.replace("[", "").replace("]", "").split(",");
               String[] tipos = tiposStr.replace("[", "").replace("]", "").split(",");

               if (variables.length != tipos.length) {
                   System.err.println("Las listas de variables y tipos no coinciden en longitud.");
                   return;
               }

               // Escribir cada variable con su tipo en el archivo
               for (int i = 0; i < variables.length; i++) {
                   String nombre = variables[i].trim();
                   String tipo = tipos[i].trim();
                   writer.write(nombre + "," + tipo + "\n");
               }
           }

           System.out.println("Archivo actualizado: " + archivo);

       } catch (IOException e) {
           System.err.println("Error al actualizar el archivo CSV: " + e.getMessage());
       }
   }



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


public String reglas;

public String getReglas() {
    return reglas;
}


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // const_numerica ::= CONST_INT 
            {
              Object RESULT =null;
		int const_intleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int const_intright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object const_int = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		reglas += "Regla 58: CONSTANTE ENTERA --> " + const_int + "\n"; RESULT=const_int; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_numerica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // const_numerica ::= CONST_REAL 
            {
              Object RESULT =null;
		int const_realleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int const_realright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object const_real = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		reglas += "Regla 57: CONSTANTE REAL --> " + const_real + "\n"; RESULT=const_real; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_numerica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // const_numerica ::= CONST_B 
            {
              Object RESULT =null;
		int const_bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int const_bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object const_b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		reglas += "Regla 56: CONSTANTE BINARIA --> " + const_b + "\n"; RESULT=const_b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_numerica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // oplist_const ::= const_numerica 
            {
              Object RESULT =null;
		int cnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		reglas += "Regla 55: OPLIST_CONST --> " + cn + "\n"; RESULT=cn; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("oplist_const",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // oplist_const ::= oplist_const PUNTO_Y_COMA const_numerica 
            {
              Object RESULT =null;
		int ocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ocright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object oc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pycleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pycright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object pyc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int consleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int consright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cons = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		reglas += "Regla 54: OPLIST_CONST --> " + oc + pyc + cons + "\n"; RESULT=oc.toString() + pyc.toString() + cons.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("oplist_const",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // oplist_operaciones ::= OP_MULT 
            {
              Object RESULT =null;
		int omleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int omright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object om = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		reglas += "Regla 53: OPLIST_OPERACIONES --> " + om + "\n"; RESULT=om; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("oplist_operaciones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // oplist_operaciones ::= OP_SUMA 
            {
              Object RESULT =null;
		int osleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int osright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object os = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		reglas += "Regla 52: OPLIST_OPERACIONES --> " + os + "\n"; RESULT=os; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("oplist_operaciones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // oplist ::= OPLIST ABRIR_CORCHETE oplist_operaciones ABRIR_CORCHETE ID PUNTO_Y_COMA ID CERRAR_CORCHETE ABRIR_CORCHETE oplist_const CERRAR_CORCHETE CERRAR_CORCHETE 
            {
              Object RESULT =null;
		int olleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int olright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object ol = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object ac = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int ooleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int ooright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object oo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pycleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pycright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object pyc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object cc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ocright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object oc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		reglas += "Regla 51: OPLIST --> " + ol + " " + ac + oo + " " + ac + id + pyc + id2 + cc + " " + ac + oc + cc + cc + "\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("oplist",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parametro_escritura ::= CONST_STRING 
            {
              Object RESULT =null;
		int const_stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int const_stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object const_string = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		reglas += "Regla 50: CONSTANTE STRING --> " + const_string + "\n"; RESULT=const_string; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_escritura",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametro_escritura ::= const_numerica 
            {
              Object RESULT =null;
		int const_numericaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int const_numericaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object const_numerica = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		reglas += "Regla 49: CONSTANTE NUMÉRICA --> " + const_numerica + "\n"; RESULT=const_numerica; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_escritura",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parametro_escritura ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		reglas += "Regla 48: VARIABLE --> " + id + "\n"; RESULT=id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_escritura",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // escritura ::= WRITE parametro_escritura 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		reglas += "Regla 47: ESCRITURA --> " + w + " " + param + "\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escritura",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // factor ::= const_numerica 
            {
              Object RESULT =null;
		int cnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		reglas += "Regla 46: FACTOR --> " + cn + "\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // factor ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		reglas += "Regla 45: FACTOR --> " + id + "\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // factor ::= ABRIR_PARENTESIS expresion CERRAR_PARENTESIS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		reglas += "Regla 44: FACTOR --> " + a + " EXPRESION " + c + "\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // termino ::= factor 
            {
              Object RESULT =null;
		reglas += "Regla 44: TERMINO --> FACTOR\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // termino ::= termino OP_DIV factor 
            {
              Object RESULT =null;
		int odleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int odright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object od = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		reglas += "Regla 43: TERMINO --> TERMINO " + od + " FACTOR\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // termino ::= termino OP_MULT factor 
            {
              Object RESULT =null;
		int omleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int omright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object om = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		reglas += "Regla 42: TERMINO --> TERMINO " + om + " FACTOR\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= termino 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		reglas += "Regla 41: EXPRESION --> TERMINO\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= expresion OP_RESTA termino 
            {
              Object RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int orright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object or = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		reglas += "Regla 40: EXPRESION --> EXPRESION " + or + " TERMINO\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= expresion OP_SUMA termino 
            {
              Object RESULT =null;
		int osleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int osright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object os = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		reglas += "Regla 39: EXPRESION --> EXPRESION " + os + " TERMINO\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comparador ::= OP_MAYOR_IGUAL 
            {
              Object RESULT =null;
		int maileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mairight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object mai = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		reglas += "Regla 38: COMPARADOR --> " + mai + "\n"; RESULT=mai; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comparador ::= OP_MENOR_IGUAL 
            {
              Object RESULT =null;
		int meileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int meiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object mei = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		reglas += "Regla 37: COMPARADOR --> " + mei + "\n"; RESULT=mei; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comparador ::= OP_IGUAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		reglas += "Regla 36: COMPARADOR --> " + i + "\n"; RESULT=i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comparador ::= OP_MENOR 
            {
              Object RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		reglas += "Regla 35: COMPARADOR --> " + me + "\n"; RESULT=me; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comparador ::= OP_MAYOR 
            {
              Object RESULT =null;
		int maleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int maright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		reglas += "Regla 34: COMPARADOR --> " + ma + "\n"; RESULT=ma; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comparacion ::= ABRIR_PARENTESIS comparacion CERRAR_PARENTESIS 
            {
              Object RESULT =null;
		int apleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ap = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		reglas += "Regla 33: COMPARACION --> " + ap + " COMPARACION " + cp + "\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // comparacion ::= expresion comparador expresion 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		reglas += "Regla 32: COMPARACION --> EXPRESION " + c + " EXPRESION\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // conector ::= CON_OR 
            {
              Object RESULT =null;
		reglas += "Regla 31: CONECTOR --> CON_OR\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conector",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // conector ::= CON_AND 
            {
              Object RESULT =null;
		reglas += "Regla 30: CONECTOR --> CON_AND\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conector",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // condicion ::= comparacion conector comparacion 
            {
              Object RESULT =null;
		reglas += "Regla 29: CONDICION --> COMPARACION CONECTOR COMPARACION\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // condicion ::= comparacion 
            {
              Object RESULT =null;
		reglas += "Regla 28: CONDICION --> COMPARACION\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // iteracion ::= WHILE ABRIR_PARENTESIS condicion CERRAR_PARENTESIS THEN sentencia_n ENDWHILE 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object ap = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object cp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ewleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ewright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ew = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		reglas += "Regla 27: ITERACION --> " + w + " " + ap + " CONDICION " + cp + " " + t + " SENTENCIAS " + ew + "\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteracion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // decision ::= IF ABRIR_PARENTESIS condicion CERRAR_PARENTESIS THEN sentencia_n ENDIF 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ap1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int ap1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object ap1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object cp1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int endif1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int endif1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object endif1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		reglas += "Regla 26: DECISION --> " + i1 + " " + ap1 + " CONDICION " + cp1 + " " + t1 + " SENTENCIAS " + endif1 + "\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decision",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // decision ::= IF ABRIR_PARENTESIS condicion CERRAR_PARENTESIS THEN sentencia_n ELSE sentencia_n ENDIF 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object ap = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object cp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int endifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int endifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object endif = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		reglas += "Regla 25: DECISION --> " + i + " " + ap + " CONDICION " + cp + " " + t + " SENTENCIAS " + el + " SENTENCIAS " + endif + "\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decision",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // asignacion ::= ID ASIGN CONST_STRING 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		reglas += "Regla 24: ASIGNACION --> " + id + " " + a + " " + cs + "\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // asignacion ::= ID ASIGN expresion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		reglas += "Regla 23: ASIGNACION --> " + id + " " + a + " EXPRESION \n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia ::= oplist 
            {
              Object RESULT =null;
		reglas += "Regla 22: SENTENCIA --> OPLIST\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= escritura 
            {
              Object RESULT =null;
		reglas += "Regla 21: SENTENCIA --> ESCRITURA\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= decision 
            {
              Object RESULT =null;
		reglas += "Regla 20: SENTENCIA --> DECISION\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= iteracion 
            {
              Object RESULT =null;
		reglas += "Regla 19: SENTENCIA --> ITERACION\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= asignacion 
            {
              Object RESULT =null;
		reglas += "Regla 18: SENTENCIA --> ASIGNACION\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		reglas += "Regla 17: TYPE --> " + s + "\n"; RESULT=s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		reglas += "Regla 16: TYPE --> " + i + "\n"; RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		reglas += "Regla 15: TYPE --> " + f + "\n"; RESULT=f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion_aux ::= CERRAR_CORCHETE DECLARACION ABRIR_CORCHETE 
            {
              Object RESULT =null;
		int cc2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cc2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cc2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int acoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int acoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object aco = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		reglas += "Regla 14: DECLARACION_AUX --> " + cc2 + d + aco + "\n"; RESULT = cc2.toString() + d.toString() + aco.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_aux",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracion_aux ::= COMA ID declaracion_aux type COMA 
            {
              Object RESULT =null;
		int comaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int comaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object coma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int daleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int daright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object da = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		reglas += "Regla 13: DECLARACION_AUX --> " + coma + " " + id  + da + t + coma + " " + "\n"; RESULT= coma.toString()+ " " +id.toString() + da.toString() + t.toString() + coma.toString() + " ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_aux",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion ::= ABRIR_CORCHETE ID declaracion_aux type CERRAR_CORCHETE 
            {
              Object RESULT =null;
		int acleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object ac = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int daleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int daright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object da = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		reglas += "Regla 12: DECLARATION --> " + ac.toString() + id.toString() + da.toString() + type.toString() + cc.toString() + "\n";
    RESULT = ac.toString() + id.toString() + da.toString() + type.toString() + cc.toString();
    parser.actualizarTipo(ac.toString() + id.toString() + da.toString() + type.toString() + cc.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // write_constante ::= WRITE CONST_STRING 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		reglas += "Regla 11: WRITE CONSTANTE --> " + w + " " + c + "\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_constante",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia_write ::= write_constante 
            {
              Object RESULT =null;
		reglas += "Regla 10: SENTENCIA WRITE --> WRITE_CONSTANTE\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_write",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia_write ::= sentencia_write write_constante 
            {
              Object RESULT =null;
		reglas += "Regla 09: SENTENCIA WRITE --> SENTENCIA_WRITE WRITE_CONSTANTE\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_write",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // program_write ::= PROGRAM_SECTION sentencia_write ENDPROGRAM_SECTION 
            {
              Object RESULT =null;
		reglas += "Regla 08: PROGRAM WRITE --> PROGRAM_SECTION SENTENCIA_WRITE ENDPROGRAM_SECTION\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_write",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia_n ::= sentencia 
            {
              Object RESULT =null;
		reglas += "Regla 07: SENTENCIAS --> SENTENCIA\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_n",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia_n ::= sentencia_n sentencia 
            {
              Object RESULT =null;
		reglas += "Regla 06: SENTENCIAS --> SENTENCIAS SENTENCIA\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_n",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // program_sec ::= PROGRAM_SECTION sentencia_n ENDPROGRAM_SECTION 
            {
              Object RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		reglas += "Regla 05: PROGRAM_SEC --> " + ps + " SENTENCIAS " + es + "\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_sec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracion_n ::= declaracion 
            {
              Object RESULT =null;
		reglas += "Regla 04: DECLARACIONES --> DECLARACION\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_n",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracion_n ::= declaracion_n declaracion 
            {
              Object RESULT =null;
		reglas += "Regla 03: DECLARACIONES --> DECLARACIONES DECLARACION\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_n",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declare_sec ::= DECLARE_SECTION declaracion_n ENDDECLARE_SECTION 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		reglas += "Regla 02: DECLARE_SEC --> " + ds + " DECLARACIONES " + es + "\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declare_sec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // pgm ::= program_write 
            {
              Object RESULT =null;
		reglas += "Regla 01: pgm --> PROGRAM WRITE; Compilación completa\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pgm",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // pgm ::= declare_sec program_sec 
            {
              Object RESULT =null;
		reglas += "Regla 00: pgm ; Compilación completa\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pgm",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= pgm EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

