
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 24 21:25:25 ART 2024
//----------------------------------------------------

package com.grupo2.tpteo1grupo2;

import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 24 21:25:25 ART 2024
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\005\000\002\004\004\000\002\004\003" +
    "\000\002\005\005\000\002\006\004\000\002\006\003\000" +
    "\002\007\005\000\002\010\004\000\002\010\003\000\002" +
    "\011\004\000\002\012\011\000\002\012\011\000\002\013" +
    "\007\000\002\013\005\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\016\005\000\002\016\005\000\002\017\013\000\002\017" +
    "\011\000\002\020\011\000\002\021\003\000\002\021\005" +
    "\000\002\022\005\000\002\022\005\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\024\005\000\002\024\005\000\002\024" +
    "\003\000\002\025\005\000\002\025\005\000\002\025\003" +
    "\000\002\026\005\000\002\026\003\000\002\026\003\000" +
    "\002\027\004\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\031\016\000\002\032\003\000\002\032" +
    "\003\000\002\033\005\000\002\033\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\006\041\010\043\006\001\002\000\004\002" +
    "\201\001\002\000\004\002\uffff\001\002\000\004\013\174" +
    "\001\002\000\004\043\044\001\002\000\004\051\011\001" +
    "\002\000\004\020\016\001\002\000\006\042\014\051\011" +
    "\001\002\000\006\042\ufffc\051\ufffc\001\002\000\004\043" +
    "\ufffe\001\002\000\006\042\ufffd\051\ufffd\001\002\000\006" +
    "\052\020\056\017\001\002\000\006\020\030\052\031\001" +
    "\002\000\004\040\021\001\002\000\004\051\022\001\002" +
    "\000\010\014\026\015\023\016\024\001\002\000\006\052" +
    "\uffef\056\uffef\001\002\000\006\052\uffee\056\uffee\001\002" +
    "\000\004\052\027\001\002\000\006\052\ufff0\056\ufff0\001" +
    "\002\000\006\042\ufff3\051\ufff3\001\002\000\004\056\040" +
    "\001\002\000\004\040\036\001\002\000\004\056\033\001" +
    "\002\000\010\014\026\015\023\016\024\001\002\000\004" +
    "\052\035\001\002\000\006\042\ufff4\051\ufff4\001\002\000" +
    "\004\051\037\001\002\000\004\056\ufff1\001\002\000\006" +
    "\020\030\052\031\001\002\000\004\056\042\001\002\000" +
    "\010\014\026\015\023\016\024\001\002\000\004\056\ufff2" +
    "\001\002\000\014\004\051\010\046\013\055\017\057\020" +
    "\054\001\002\000\004\002\000\001\002\000\004\045\165" +
    "\001\002\000\024\004\ufff9\006\ufff9\007\ufff9\010\ufff9\011" +
    "\ufff9\013\ufff9\017\ufff9\020\ufff9\044\ufff9\001\002\000\024" +
    "\004\uffed\006\uffed\007\uffed\010\uffed\011\uffed\013\uffed\017" +
    "\uffed\020\uffed\044\uffed\001\002\000\004\045\135\001\002" +
    "\000\024\004\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\013" +
    "\uffeb\017\uffeb\020\uffeb\044\uffeb\001\002\000\024\004\uffec" +
    "\006\uffec\007\uffec\010\uffec\011\uffec\013\uffec\017\uffec\020" +
    "\uffec\044\uffec\001\002\000\004\037\113\001\002\000\014" +
    "\020\107\021\100\022\077\023\110\024\101\001\002\000" +
    "\024\004\uffea\006\uffea\007\uffea\010\uffea\011\uffea\013\uffea" +
    "\017\uffea\020\uffea\044\uffea\001\002\000\004\051\064\001" +
    "\002\000\024\004\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9" +
    "\013\uffe9\017\uffe9\020\uffe9\044\uffe9\001\002\000\016\004" +
    "\051\010\046\013\055\017\057\020\054\044\062\001\002" +
    "\000\004\002\ufffb\001\002\000\024\004\ufffa\006\ufffa\007" +
    "\ufffa\010\ufffa\011\ufffa\013\ufffa\017\ufffa\020\ufffa\044\ufffa" +
    "\001\002\000\006\032\066\034\065\001\002\000\004\051" +
    "\uffcb\001\002\000\004\051\uffcc\001\002\000\004\051\070" +
    "\001\002\000\004\020\071\001\002\000\004\053\072\001" +
    "\002\000\004\020\073\001\002\000\004\052\074\001\002" +
    "\000\004\051\075\001\002\000\010\021\100\022\077\024" +
    "\101\001\002\000\006\052\103\053\104\001\002\000\054" +
    "\004\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\013\uffc7\017" +
    "\uffc7\020\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7" +
    "\032\uffc7\033\uffc7\034\uffc7\035\uffc7\044\uffc7\046\uffc7\052" +
    "\uffc7\053\uffc7\001\002\000\054\004\uffc6\006\uffc6\007\uffc6" +
    "\010\uffc6\011\uffc6\013\uffc6\017\uffc6\020\uffc6\025\uffc6\026" +
    "\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6" +
    "\035\uffc6\044\uffc6\046\uffc6\052\uffc6\053\uffc6\001\002\000" +
    "\054\004\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\013\uffc8" +
    "\017\uffc8\020\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\044\uffc8\046\uffc8" +
    "\052\uffc8\053\uffc8\001\002\000\006\052\uffc9\053\uffc9\001" +
    "\002\000\004\052\106\001\002\000\010\021\100\022\077" +
    "\024\101\001\002\000\006\052\uffca\053\uffca\001\002\000" +
    "\024\004\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\013\uffcd" +
    "\017\uffcd\020\uffcd\044\uffcd\001\002\000\024\004\uffd0\006" +
    "\uffd0\007\uffd0\010\uffd0\011\uffd0\013\uffd0\017\uffd0\020\uffd0" +
    "\044\uffd0\001\002\000\024\004\uffce\006\uffce\007\uffce\010" +
    "\uffce\011\uffce\013\uffce\017\uffce\020\uffce\044\uffce\001\002" +
    "\000\024\004\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\013" +
    "\uffcf\017\uffcf\020\uffcf\044\uffcf\001\002\000\024\004\uffd1" +
    "\006\uffd1\007\uffd1\010\uffd1\011\uffd1\013\uffd1\017\uffd1\020" +
    "\uffd1\044\uffd1\001\002\000\016\020\121\021\100\022\077" +
    "\023\116\024\101\045\120\001\002\000\050\004\uffd8\006" +
    "\uffd8\007\uffd8\010\uffd8\011\uffd8\013\uffd8\017\uffd8\020\uffd8" +
    "\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033" +
    "\uffd8\034\130\035\131\044\uffd8\046\uffd8\001\002\000\050" +
    "\004\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\013\uffd2\017" +
    "\uffd2\020\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\035\uffd2\044\uffd2\046\uffd2\001" +
    "\002\000\024\004\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7" +
    "\013\uffe7\017\uffe7\020\uffe7\044\uffe7\001\002\000\030\004" +
    "\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\013\uffe8\017\uffe8" +
    "\020\uffe8\032\125\033\126\044\uffe8\001\002\000\014\020" +
    "\121\021\100\022\077\024\101\045\120\001\002\000\050" +
    "\004\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\013\uffd3\017" +
    "\uffd3\020\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3" +
    "\032\uffd3\033\uffd3\034\uffd3\035\uffd3\044\uffd3\046\uffd3\001" +
    "\002\000\050\004\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5" +
    "\013\uffd5\017\uffd5\020\uffd5\025\uffd5\026\uffd5\027\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\044\uffd5" +
    "\046\uffd5\001\002\000\010\032\125\033\126\046\124\001" +
    "\002\000\050\004\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4" +
    "\013\uffd4\017\uffd4\020\uffd4\025\uffd4\026\uffd4\027\uffd4\030" +
    "\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\044\uffd4" +
    "\046\uffd4\001\002\000\014\020\121\021\100\022\077\024" +
    "\101\045\120\001\002\000\014\020\121\021\100\022\077" +
    "\024\101\045\120\001\002\000\050\004\uffd9\006\uffd9\007" +
    "\uffd9\010\uffd9\011\uffd9\013\uffd9\017\uffd9\020\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034" +
    "\130\035\131\044\uffd9\046\uffd9\001\002\000\014\020\121" +
    "\021\100\022\077\024\101\045\120\001\002\000\014\020" +
    "\121\021\100\022\077\024\101\045\120\001\002\000\050" +
    "\004\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\013\uffd6\017" +
    "\uffd6\020\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6" +
    "\032\uffd6\033\uffd6\034\uffd6\035\uffd6\044\uffd6\046\uffd6\001" +
    "\002\000\050\004\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7" +
    "\013\uffd7\017\uffd7\020\uffd7\025\uffd7\026\uffd7\027\uffd7\030" +
    "\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\044\uffd7" +
    "\046\uffd7\001\002\000\050\004\uffda\006\uffda\007\uffda\010" +
    "\uffda\011\uffda\013\uffda\017\uffda\020\uffda\025\uffda\026\uffda" +
    "\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\130\035" +
    "\131\044\uffda\046\uffda\001\002\000\014\020\121\021\100" +
    "\022\077\024\101\045\140\001\002\000\016\025\154\026" +
    "\160\027\153\030\156\031\157\046\uffe3\001\002\000\020" +
    "\025\154\026\160\027\153\030\156\031\157\032\125\033" +
    "\126\001\002\000\014\020\121\021\100\022\077\024\101" +
    "\045\140\001\002\000\004\046\142\001\002\000\004\005" +
    "\143\001\002\000\014\004\051\010\046\013\055\017\057" +
    "\020\054\001\002\000\020\004\051\006\145\007\146\010" +
    "\046\013\055\017\057\020\054\001\002\000\014\004\051" +
    "\010\046\013\055\017\057\020\054\001\002\000\024\004" +
    "\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\013\uffe5\017\uffe5" +
    "\020\uffe5\044\uffe5\001\002\000\016\004\051\007\150\010" +
    "\046\013\055\017\057\020\054\001\002\000\024\004\uffe6" +
    "\006\uffe6\007\uffe6\010\uffe6\011\uffe6\013\uffe6\017\uffe6\020" +
    "\uffe6\044\uffe6\001\002\000\004\046\162\001\002\000\022" +
    "\025\154\026\160\027\153\030\156\031\157\032\125\033" +
    "\126\046\124\001\002\000\014\020\uffdd\021\uffdd\022\uffdd" +
    "\024\uffdd\045\uffdd\001\002\000\014\020\uffde\021\uffde\022" +
    "\uffde\024\uffde\045\uffde\001\002\000\014\020\121\021\100" +
    "\022\077\024\101\045\120\001\002\000\014\020\uffdc\021" +
    "\uffdc\022\uffdc\024\uffdc\045\uffdc\001\002\000\014\020\uffdb" +
    "\021\uffdb\022\uffdb\024\uffdb\045\uffdb\001\002\000\014\020" +
    "\uffdf\021\uffdf\022\uffdf\024\uffdf\045\uffdf\001\002\000\022" +
    "\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\125\033" +
    "\126\046\uffe1\001\002\000\016\025\uffe0\026\uffe0\027\uffe0" +
    "\030\uffe0\031\uffe0\046\uffe0\001\002\000\014\020\121\021" +
    "\100\022\077\024\101\045\140\001\002\000\004\046\uffe2" +
    "\001\002\000\014\020\121\021\100\022\077\024\101\045" +
    "\140\001\002\000\004\046\167\001\002\000\004\005\170" +
    "\001\002\000\014\004\051\010\046\013\055\017\057\020" +
    "\054\001\002\000\016\004\051\010\046\011\172\013\055" +
    "\017\057\020\054\001\002\000\024\004\uffe4\006\uffe4\007" +
    "\uffe4\010\uffe4\011\uffe4\013\uffe4\017\uffe4\020\uffe4\044\uffe4" +
    "\001\002\000\006\013\ufff6\044\ufff6\001\002\000\004\023" +
    "\200\001\002\000\006\013\174\044\177\001\002\000\006" +
    "\013\ufff7\044\ufff7\001\002\000\004\002\ufff8\001\002\000" +
    "\006\013\ufff5\044\ufff5\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\010\002\003\003\006\007\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\174\011\172" +
    "\001\001\000\004\005\044\001\001\000\006\004\011\012" +
    "\012\001\001\000\002\001\001\000\004\012\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\040\001\001\000\002\001\001\000\004\014\042" +
    "\001\001\000\002\001\001\000\020\006\060\015\046\016" +
    "\047\017\051\020\052\027\055\031\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\030\111\034\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\015\062\016\047\017\051\020\052\027\055\031\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\033\075\034" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\024\116\025\113\026\121" +
    "\034\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\024\122\025\113" +
    "\026\121\034\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\025\133" +
    "\026\121\034\114\001\001\000\010\025\126\026\121\034" +
    "\114\001\001\000\002\001\001\000\006\026\132\034\114" +
    "\001\001\000\006\026\131\034\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\021\140" +
    "\022\135\024\136\025\113\026\121\034\114\001\001\000" +
    "\004\023\162\001\001\000\004\023\154\001\001\000\014" +
    "\022\150\024\151\025\113\026\121\034\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\006\143\015\046" +
    "\016\047\017\051\020\052\027\055\031\057\001\001\000" +
    "\016\015\062\016\047\017\051\020\052\027\055\031\057" +
    "\001\001\000\020\006\146\015\046\016\047\017\051\020" +
    "\052\027\055\031\057\001\001\000\002\001\001\000\016" +
    "\015\062\016\047\017\051\020\052\027\055\031\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\024" +
    "\160\025\113\026\121\034\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\022\163\024\136\025\113\026\121" +
    "\034\114\001\001\000\002\001\001\000\016\021\165\022" +
    "\135\024\136\025\113\026\121\034\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\006\170\015\046\016" +
    "\047\017\051\020\052\027\055\031\057\001\001\000\016" +
    "\015\062\016\047\017\051\020\052\027\055\031\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s) {
        System.out.println("Error en la linea " + (s.right+1) + " columna " + s.left + ". "
            + s + " no reconocido valor " + s.value );
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // const_numerica ::= CONST_INT 
            {
              Object RESULT =null;
		int const_intleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int const_intright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object const_int = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("Regla 58: CONSTANTE ENTERA valor = " + const_int); RESULT=const_int; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_numerica",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // const_numerica ::= CONST_REAL 
            {
              Object RESULT =null;
		int const_realleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int const_realright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object const_real = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Regla 57: CONSTANTE REAL valor = " + const_real); RESULT=const_real; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_numerica",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // const_numerica ::= CONST_B 
            {
              Object RESULT =null;
		int const_bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int const_bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object const_b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Regla 56: CONSTANTE BINARIA valor = " + const_b); RESULT=const_b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_numerica",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // oplist_const ::= const_numerica 
            {
              Object RESULT =null;
		System.out.println("Regla 55: oplist_const");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("oplist_const",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // oplist_const ::= oplist_const PUNTO_Y_COMA const_numerica 
            {
              Object RESULT =null;
		System.out.println("Regla 54: oplist_const");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("oplist_const",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // oplist_operaciones ::= OP_MULT 
            {
              Object RESULT =null;
		System.out.println("Regla 53: oplist_operaciones");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("oplist_operaciones",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // oplist_operaciones ::= OP_SUMA 
            {
              Object RESULT =null;
		System.out.println("Regla 52: oplist_operaciones");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("oplist_operaciones",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // oplist ::= OPLIST ABRIR_CORCHETE oplist_operaciones ABRIR_CORCHETE ID PUNTO_Y_COMA ID CERRAR_CORCHETE ABRIR_CORCHETE oplist_const CERRAR_CORCHETE CERRAR_CORCHETE 
            {
              Object RESULT =null;
		System.out.println("Regla 51: oplist");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("oplist",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametro_escritura ::= CONST_STRING 
            {
              Object RESULT =null;
		int const_stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int const_stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object const_string = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Regla 50: CONSTANTE STRING valor = " + const_string); RESULT=const_string; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_escritura",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parametro_escritura ::= const_numerica 
            {
              Object RESULT =null;
		int const_numericaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int const_numericaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object const_numerica = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Regla 49: CONSTANTE NUMÉRICA valor = " + const_numerica); RESULT=const_numerica; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_escritura",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametro_escritura ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Regla 48: VARIABLE valor = " + id); RESULT=id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro_escritura",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // escritura ::= WRITE parametro_escritura 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Regla 47: ESCRITURA = " + w + param);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escritura",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // factor ::= const_numerica 
            {
              Object RESULT =null;
		int cnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Regla 46: FACTOR = " + cn);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // factor ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Regla 45: FACTOR = " + id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // factor ::= ABRIR_PARENTESIS expresion CERRAR_PARENTESIS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Regla 44: FACTOR = " +a + "EXPRESION" + c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // termino ::= factor 
            {
              Object RESULT =null;
		System.out.println("Regla 43: TERMINO = FACTOR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // termino ::= termino OP_DIV factor 
            {
              Object RESULT =null;
		int odleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int odright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object od = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("Regla 42: TERMINO = TERMINO " + od + " FACTOR");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // termino ::= termino OP_MULT factor 
            {
              Object RESULT =null;
		int omleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int omright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object om = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("Regla 41: TERMINO = TERMINO " + om +" FACTOR");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= termino 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Regla 40: EXPRESION = TERMINO");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= expresion OP_RESTA termino 
            {
              Object RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int orright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object or = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("Regla 39: EXPRESION = EXPRESION " + or + " TERMINO");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= expresion OP_SUMA termino 
            {
              Object RESULT =null;
		int osleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int osright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object os = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("Regla 38: EXPRESION = EXPRESION " + os + " TERMINO"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comparador ::= OP_MAYOR_IGUAL 
            {
              Object RESULT =null;
		int maileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mairight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object mai = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Regla 37: COMPARADO = " + mai); RESULT=mai; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comparador ::= OP_MENOR_IGUAL 
            {
              Object RESULT =null;
		int meileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int meiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object mei = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Regla 36: COMPARADO = " + mei); RESULT=mei; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comparador ::= OP_IGUAL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Regla 35: COMPARADO = " + i); RESULT=i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comparador ::= OP_MENOR 
            {
              Object RESULT =null;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object me = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Regla 34: COMPARADO = " + me); RESULT=me; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comparador ::= OP_MAYOR 
            {
              Object RESULT =null;
		int maleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int maright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Regla 33: COMPARADO = " + ma); RESULT=ma; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // comparacion ::= ABRIR_PARENTESIS comparacion CERRAR_PARENTESIS 
            {
              Object RESULT =null;
		int apleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ap = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Regla 32: COMPARACION = " + ap + " COMPARACION " + cp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // comparacion ::= expresion comparador expresion 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("Regla 31: COMPARACION = EXPRESION " + c + " EXPRESION");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // condicion ::= comparacion comparador comparacion 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("Regla 30: CONDICION = COMPARACION " + c + " COMPARACION");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // condicion ::= comparacion 
            {
              Object RESULT =null;
		System.out.println("Regla 29: CONDICION = COMPARACION");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // iteracion ::= WHILE ABRIR_PARENTESIS condicion CERRAR_PARENTESIS THEN sentencia_n ENDWHILE 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object ap = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object cp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ewleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ewright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ew = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Regla 28: ITERACION = " + w + ap + " CONDICION " + cp + t + " SENTENCIAS " +  ew);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteracion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // decision ::= IF ABRIR_PARENTESIS condicion CERRAR_PARENTESIS THEN sentencia_n ENDIF 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object ap = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object cp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int endifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int endifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object endif = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Regla 27: DECISION = " + i + ap + " CONDICION " + cp + t + " SENTENCIAS " + endif);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decision",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // decision ::= IF ABRIR_PARENTESIS condicion CERRAR_PARENTESIS THEN sentencia_n ELSE sentencia_n ENDIF 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int apleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int apright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object ap = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object cp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int endifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int endifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object endif = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Regla 26: DECISION = " + i + ap + " CONDICION " + cp + t + " SENTENCIAS " + el + " SENTENCIAS " + endif);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decision",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // asignacion ::= ID ASIGN CONST_STRING 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Regla 25: ASIGNACION = " + id + a + cs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // asignacion ::= ID ASIGN expresion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("Regla 24: ASIGNACION = " + id + a + " EXPRESION ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia ::= oplist 
            {
              Object RESULT =null;
		System.out.println("Regla 23: SENTENCIA = OPLIST");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia ::= escritura 
            {
              Object RESULT =null;
		System.out.println("Regla 22: SENTENCIA = ESCRITURA");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= decision 
            {
              Object RESULT =null;
		System.out.println("Regla 21: SENTENCIA = DECISION");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= iteracion 
            {
              Object RESULT =null;
		System.out.println("Regla 20: SENTENCIA = ITERACION");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= asignacion 
            {
              Object RESULT =null;
		System.out.println("Regla 19: SENTENCIA = ASIGNACION");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Regla 18: TYPE = " + s); RESULT=s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Regla 17: TYPE = " + i); RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Regla 16: TYPE = " + f); RESULT=f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracion_aux ::= CERRAR_CORCHETE DECLARATION ABRIR_CORCHETE 
            {
              Object RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int acoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int acoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object aco = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Regla 15: DECLARATION_AUX = " + cc + d + aco ); RESULT = cc.toString() + d.toString() + aco.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_aux",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion_aux ::= ID COMA declaracion_aux COMA type 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int comaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int comaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object coma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int daleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int daright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object da = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Regla 14: DECLARATION_AUX = " + id + coma + da + coma + t); RESULT=id.toString()+coma.toString()+da.toString()+coma.toString()+t.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_aux",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracion ::= ABRIR_CORCHETE ID CERRAR_CORCHETE DECLARATION ABRIR_CORCHETE type CERRAR_CORCHETE 
            {
              Object RESULT =null;
		int acleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object ac = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Regla 13: DECLARATION = " + ac + id + cc + dec + ac + type + cc);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion ::= ABRIR_CORCHETE ID COMA declaracion_aux COMA type CERRAR_CORCHETE 
            {
              Object RESULT =null;
		int acleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object ac = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int comaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int comaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object coma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int daleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int daright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object da = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Regla 12: DECLARATION = " + ac + id + coma + da + coma + type + cc);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // write_constante ::= WRITE CONST_STRING 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Regla 11: WRITE CONSTANTE = " + w+c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_constante",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia_write ::= write_constante 
            {
              Object RESULT =null;
		System.out.println("Regla 10: SENTENCIA WRITE = WRITE_CONSTANTE");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_write",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia_write ::= sentencia_write write_constante 
            {
              Object RESULT =null;
		System.out.println("Regla 9: SENTENCIA WRITE = SENTENCIA_WRITE WRITE_CONSTANTE");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_write",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // program_write ::= PROGRAM_SECTION sentencia_write ENDPROGRAM_SECTION 
            {
              Object RESULT =null;
		System.out.println("Regla 8: PROGRAM WRITE = PROGRAM_SECTION SENTENCIA_WRITE ENDPROGRAM_SECTION");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_write",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia_n ::= sentencia 
            {
              Object RESULT =null;
		System.out.println("Regla 7: SENTENCIAS = SENTENCIA");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_n",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia_n ::= sentencia_n sentencia 
            {
              Object RESULT =null;
		System.out.println("Regla 6: SENTENCIAS = SENTENCIAS SENTENCIA");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_n",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // program_sec ::= PROGRAM_SECTION sentencia_n ENDPROGRAM_SECTION 
            {
              Object RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Regla 5: PROGRAM_SEC = " + ps + " SENTENCIAS " + es);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program_sec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracion_n ::= declaracion 
            {
              Object RESULT =null;
		System.out.println("Regla 4: DECLARACIONES = DECLARACION");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_n",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracion_n ::= declaracion_n declaracion 
            {
              Object RESULT =null;
		System.out.println("Regla 3: DECLARACIONES = DECLARACIONES DECLARACION");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion_n",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declare_sec ::= DECLARE_SECTION declaracion_n ENDDECLARE_SECTION 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object es = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Regla 2: DECLARE_SEC = " + ds + " DECLARACIONES " + es);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declare_sec",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // pgm ::= program_write 
            {
              Object RESULT =null;
		System.out.println("Regla 1: pgm = PROGRAM WRITE; Compilación completa");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pgm",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // pgm ::= declare_sec program_sec 
            {
              Object RESULT =null;
		System.out.println("Regla 0: pgm ; Compilación completa");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pgm",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= pgm EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

