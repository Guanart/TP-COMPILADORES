Token ID encontrado, Lexema a_1
Token DECLARATION encontrado, Lexema :=
Token CONST_INT, encontrado Lexema 35
Token SIMBOLO encontrado, Lexema ;
Token ID encontrado, Lexema b
Token DECLARATION encontrado, Lexema :=
Token CONST_STRING encontrado, Lexema "Hola mundo!"
Token SIMBOLO encontrado, Lexema ;
Token ID encontrado, Lexema contador
Token DECLARATION encontrado, Lexema :=
Token CONST_INT, encontrado Lexema 0
Token SIMBOLO encontrado, Lexema ;
Token ID encontrado, Lexema x
Token DECLARATION encontrado, Lexema :=
Token CONST_REAL, encontrado Lexema 10.5
Token SIMBOLO encontrado, Lexema ;
Token ID encontrado, Lexema y
Token DECLARATION encontrado, Lexema :=
Token CONST_INT, encontrado Lexema 20
Token SIMBOLO encontrado, Lexema ;
Token ID encontrado, Lexema resultado
Token DECLARATION encontrado, Lexema :=
Token CONST_INT, encontrado Lexema 0
Token SIMBOLO encontrado, Lexema ;
Token IF encontrado, Lexema IF
Token SIMBOLO encontrado, Lexema (
Token ID encontrado, Lexema x
Token OP_LOGICO encontrado, Lexema >
Token ID encontrado, Lexema y
Token SIMBOLO encontrado, Lexema )
Token SIMBOLO encontrado, Lexema {
Token ID encontrado, Lexema resultado
Token DECLARATION encontrado, Lexema :=
Token CONST_INT, encontrado Lexema 1
Token SIMBOLO encontrado, Lexema ;
Token WRITE encontrado, Lexema WRITE
Token CONST_STRING encontrado, Lexema "X es mayor que Y"
Token SIMBOLO encontrado, Lexema ;
Token SIMBOLO encontrado, Lexema }
Token ELSE encontrado, Lexema ELSE
Token SIMBOLO encontrado, Lexema {
Token ID encontrado, Lexema resultado
Token DECLARATION encontrado, Lexema :=
Token CONST_INT, encontrado Lexema 0
Token SIMBOLO encontrado, Lexema ;
Token WRITE encontrado, Lexema WRITE
Token CONST_STRING encontrado, Lexema "X es menor o igual que Y"
Token SIMBOLO encontrado, Lexema ;
Token SIMBOLO encontrado, Lexema }
Token ENDIF encontrado, Lexema ENDIF
Token WHILE encontrado, Lexema WHILE
Token SIMBOLO encontrado, Lexema (
Token ID encontrado, Lexema contador
Token OP_LOGICO encontrado, Lexema <
Token CONST_INT, encontrado Lexema 10
Token SIMBOLO encontrado, Lexema )
Token SIMBOLO encontrado, Lexema {
Token ID encontrado, Lexema contador
Token OP_ARITMETICO encontrado, Lexema +
Token OP_LOGICO encontrado, Lexema =
Token CONST_INT, encontrado Lexema 1
Token SIMBOLO encontrado, Lexema ;
Token WRITE encontrado, Lexema WRITE
Token CONST_STRING encontrado, Lexema "Contador: "
Token SIMBOLO encontrado, Lexema ,
Token ID encontrado, Lexema contador
Token SIMBOLO encontrado, Lexema ;
Token SIMBOLO encontrado, Lexema }
Token ENDWHILE encontrado, Lexema ENDWHILE
Token FOR encontrado, Lexema FOR
Token SIMBOLO encontrado, Lexema (
Token ID encontrado, Lexema i
Token OP_ARITMETICO encontrado, Lexema +
Token OP_LOGICO encontrado, Lexema =
Token CONST_INT, encontrado Lexema 1
Token INTEGER encontrado, Lexema INTEGER
Token ID encontrado, Lexema i
Token OP_LOGICO encontrado, Lexema =
Token CONST_INT, encontrado Lexema 1
Token SIMBOLO encontrado, Lexema ;
Token ID encontrado, Lexema i
Token OP_LOGICO encontrado, Lexema <=
Token CONST_INT, encontrado Lexema 10
Token SIMBOLO encontrado, Lexema ;
Token SIMBOLO encontrado, Lexema )
Token SIMBOLO encontrado, Lexema {
Token WRITE encontrado, Lexema WRITE
Token CONST_STRING encontrado, Lexema "Iteraciï¿½n "
Token SIMBOLO encontrado, Lexema ,
Token ID encontrado, Lexema i
Token SIMBOLO encontrado, Lexema ;
Token ID encontrado, Lexema i
Token OP_ARITMETICO encontrado, Lexema +
Token OP_LOGICO encontrado, Lexema =
Token CONST_INT, encontrado Lexema 1
Token SIMBOLO encontrado, Lexema ;
Token SIMBOLO encontrado, Lexema }
Token ENDFOR encontrado, Lexema ENDFOR
Token FOREACH encontrado, Lexema FOREACH
Token ID encontrado, Lexema elemento
Token ID encontrado, Lexema IN
Token SIMBOLO encontrado, Lexema [
Token CONST_INT, encontrado Lexema 1
Token SIMBOLO encontrado, Lexema ,
Token CONST_INT, encontrado Lexema 2
Token SIMBOLO encontrado, Lexema ,
Token CONST_INT, encontrado Lexema 3
Token SIMBOLO encontrado, Lexema ,
Token CONST_INT, encontrado Lexema 4
Token SIMBOLO encontrado, Lexema ,
Token CONST_INT, encontrado Lexema 5
Token SIMBOLO encontrado, Lexema ]
Token SIMBOLO encontrado, Lexema {
Token WRITE encontrado, Lexema WRITE
Token CONST_STRING encontrado, Lexema "Elemento actual: "
Token SIMBOLO encontrado, Lexema ,
Token ID encontrado, Lexema elemento
Token SIMBOLO encontrado, Lexema ;
Token SIMBOLO encontrado, Lexema }
Token ENDWHILE encontrado, Lexema ENDWHILE
Token RANGE encontrado, Lexema RANGE
Token SIMBOLO encontrado, Lexema (
Token CONST_INT, encontrado Lexema 1
Token SIMBOLO encontrado, Lexema ,
Token CONST_INT, encontrado Lexema 10
Token SIMBOLO encontrado, Lexema )
Token SIMBOLO encontrado, Lexema ;
Token ID encontrado, Lexema floatVariable
Token DECLARATION encontrado, Lexema :=
Token CONST_REAL, encontrado Lexema 3.14
Token SIMBOLO encontrado, Lexema ;
Token ID encontrado, Lexema integerVariable
Token DECLARATION encontrado, Lexema :=
Token CONST_INT, encontrado Lexema 100
Token SIMBOLO encontrado, Lexema ;
Token ID encontrado, Lexema stringVariable
Token DECLARATION encontrado, Lexema :=
Token CONST_STRING encontrado, Lexema "Prueba de cadena"
Token SIMBOLO encontrado, Lexema ;
Caracter no permitido: <@> 
Token OPLIST encontrado, Lexema OPLIST
Token SIMBOLO encontrado, Lexema [
Token OP_ARITMETICO encontrado, Lexema +
Token SIMBOLO encontrado, Lexema [
Token ID encontrado, Lexema a
Token SIMBOLO encontrado, Lexema ;
Token ID encontrado, Lexema b
Token SIMBOLO encontrado, Lexema ]
Token SIMBOLO encontrado, Lexema [
Token CONST_INT, encontrado Lexema 2
Token SIMBOLO encontrado, Lexema ;
Token CONST_INT, encontrado Lexema 3
Token SIMBOLO encontrado, Lexema ;
Token CONST_INT, encontrado Lexema 5
Token SIMBOLO encontrado, Lexema ]
Token SIMBOLO encontrado, Lexema ]
Token SIMBOLO encontrado, Lexema ;
Token COMENTARIO encontrado, Lexema // Comentario de prueba

Token COMENTARIO encontrado, Lexema </ Esto es otro comentario />
